/* tslint:disable */
/* eslint-disable */
/**
 * Product App Microservice
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ValidationErrorResponseAllOfErrorSubErrors } from './ValidationErrorResponseAllOfErrorSubErrors';
import {
    ValidationErrorResponseAllOfErrorSubErrorsFromJSON,
    ValidationErrorResponseAllOfErrorSubErrorsFromJSONTyped,
    ValidationErrorResponseAllOfErrorSubErrorsToJSON,
} from './ValidationErrorResponseAllOfErrorSubErrors';

/**
 * 
 * @export
 * @interface ValidationErrorResponseAllOfError
 */
export interface ValidationErrorResponseAllOfError {
    /**
     * 
     * @type {string}
     * @memberof ValidationErrorResponseAllOfError
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationErrorResponseAllOfError
     */
    timestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationErrorResponseAllOfError
     */
    message?: string;
    /**
     * 
     * @type {Array<ValidationErrorResponseAllOfErrorSubErrors>}
     * @memberof ValidationErrorResponseAllOfError
     */
    subErrors?: Array<ValidationErrorResponseAllOfErrorSubErrors>;
}

/**
 * Check if a given object implements the ValidationErrorResponseAllOfError interface.
 */
export function instanceOfValidationErrorResponseAllOfError(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ValidationErrorResponseAllOfErrorFromJSON(json: any): ValidationErrorResponseAllOfError {
    return ValidationErrorResponseAllOfErrorFromJSONTyped(json, false);
}

export function ValidationErrorResponseAllOfErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValidationErrorResponseAllOfError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': !exists(json, 'status') ? undefined : json['status'],
        'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'subErrors': !exists(json, 'subErrors') ? undefined : ((json['subErrors'] as Array<any>).map(ValidationErrorResponseAllOfErrorSubErrorsFromJSON)),
    };
}

export function ValidationErrorResponseAllOfErrorToJSON(value?: ValidationErrorResponseAllOfError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': value.status,
        'timestamp': value.timestamp,
        'message': value.message,
        'subErrors': value.subErrors === undefined ? undefined : ((value.subErrors as Array<any>).map(ValidationErrorResponseAllOfErrorSubErrorsToJSON)),
    };
}

